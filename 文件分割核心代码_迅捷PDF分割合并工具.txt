[StructLayout(LayoutKind.Sequential)]
public struct tpageInfoitems
{
    public string Author;
    public string Keywords;
    public string Subject;
    public string Title;
    public string CreationDate;
    public string ModDate;
}

using System.Collections;
[StructLayout(LayoutKind.Sequential)]
public struct tsplitsettings
{
    public mainform.tsplitpagemode split_page_mode;
    public int split_page_interval;
    public ArrayList customizePages; //需要using System.Collections;
    public bool viewOptions_bookmarks;
    public mainform.tpageInfoitems pageInfoItems;
    public bool keepOriginalInfo;
}

public static tsplitsettings g_splitsettings;

public enum tsplitpagemode
{
    spEveryPage,
    spEvenPage,
    spOddPage,
    spSpecifyInterval,
    spCustomize
}

private void buttonStartSplit_Click(object sender, EventArgs e)
{
    if (g_threadWorking)
    {
        g_threadAbortReq = true;
        this.buttonStartSplit.Enabled = false;
    }
    else if (!this.radioButtonOriginalDir.Checked && (this.textBoxOutputPath.Text.Trim() == ""))
    {
        MessageBox.Show("请指定有效的目标文件夹后重试。");
    }
    else
    {
        if (!Program.versionType)
        {
            if (Program.trymode == 1)
            {
                MessageBox.Show("未注册版输出文件将会附加“迅捷PDF分割合并(未注册)”水印。");
            }
            else
            {
                long num = 0L;
                for (int i = 0; i < m_splitTaskList.Count; i++)
                {
                    threadTaskItem item = (threadTaskItem) m_splitTaskList[i];
                    if (!item.ignore && File.Exists(item.filename))
                    {
                        FileInfo info = new FileInfo(item.filename);
                        num += info.Length;
                        if (num > 0xfa000L)
                        {
                            MessageBox.Show("未注册版支持处理文件总大小不超过1M，关闭本窗口后将弹出注册窗口。");
                            this.button10_Click(null, null);
                            if (Program.versionType)
                            {
                                break;
                            }
                            return;
                        }
                    }
                }
            }
        }
        this.rdSplitSinglePage_CheckedChanged(null, null);
        if (g_last_parse_customizepage_result)
        {
            for (int j = 0; j < m_splitTaskList.Count; j++)
            {
                threadTaskItem item2 = (threadTaskItem) m_splitTaskList[j];
                if (this.radioButtonOriginalDir.Checked)
                {
                    item2.outputDirPath = Path.GetDirectoryName(item2.filename) + @"\";
                }
                else
                {
                    item2.outputDirPath = this.textBoxOutputPath.Text;
                }
            }
            initThreadRunVars();
            this.panel32.Enabled = false;
            this.buttonAddSplitFile.Enabled = false;
            this.buttonDeleteSplitItem.Enabled = false;
            this.buttonMoveDownSplitItem.Enabled = false;
            this.buttonMoveUpSplitItem.Enabled = false;
            this.buttonAddSplitFilesByFolder.Enabled = false;
            this.pictureBoxSplitBusy.Visible = true;
            this.startSplitThread();
        }
    }
}

private void startSplitThread()
{
    new Thread(new ThreadStart(this.splitThreadCallback)) { IsBackground = false }.Start();
}

private void splitThreadCallback()
{
    Logger.info("splitThreadCallback start");
    new License().SetLicense(Application.StartupPath + @"\Aspose.Total.lic");
    for (int i = 0; i < m_splitTaskList.Count; i++)
    {
        threadTaskItem item = (threadTaskItem) m_splitTaskList[i];
        if (!item.ignore)
        {
            object[] args = new object[] { tthreadnotifytype.tntStart, i };
            base.BeginInvoke(new tworksThreadEventDelegate(this.splitThreadEvent), args);
            Document document = null;
            try
            {
                document = new Document(item.filename, item.filePassword);
            }
            catch
            {
                Logger.info($"读取文件失败！文件名:"{Path.GetFileName(item.filename)}"");
                item.error_text = "读取源文件失败";
                item.result = taskResult.trFailed;
                object[] objArray2 = new object[] { tthreadnotifytype.tntFinished, i };
                base.BeginInvoke(new tworksThreadEventDelegate(this.splitThreadEvent), objArray2);
                Thread.Sleep(1);
                if (g_threadAbortReq)
                {
                    Logger.info("task,got user abort req.");
                    break;
                }
                continue;
            }
            bool flag = false;
            try
            {
                if (!Directory.Exists(item.outputDirPath))
                {
                    Directory.CreateDirectory(item.outputDirPath);
                    flag = true;
                }
                else
                {
                    flag = true;
                }
            }
            catch (Exception exception1)
            {
                g_thread_error_text = exception1.ToString();
                item.result = taskResult.trFailed;
            }
            if (flag)
            {
                try
                {
                    int num4;
                    Logger.info("开始分割文件：" + Path.GetFileName(item.filename));
                    ArrayList tmpoutpupages = new ArrayList();
                    int count = document.Pages.Count;
                    int num3 = 0;
                    mainform.tsplitpagemode tsplitpagemode = g_splitsettings.split_page_mode;
                    switch (tsplitpagemode)
                    {
                        case mainform.tsplitpagemode.spCustomize:
                            tmpoutpupages = g_splitsettings.customizePages;
                            goto Label_022B;

                        case mainform.tsplitpagemode.spEvenPage:
                            num3 = 1;
                            break;
                    }
                    int num6 = 1;
                    int num7 = 1;
                    if (tsplitpagemode == mainform.tsplitpagemode.spSpecifyInterval)
                    {
                        num6 = g_splitsettings.split_page_interval;
                        num7 = g_splitsettings.split_page_interval;
                    }
                    else if (tsplitpagemode == mainform.tsplitpagemode.spEvenPage)
                    {
                        num6 = 2;
                        num7 = 1;
                    }
                    else if (tsplitpagemode == mainform.tsplitpagemode.spOddPage)
                    {
                        num6 = 2;
                        num7 = 1;
                    }
                    while (num3 < count)
                    {
                        int num8 = ((num3 + 1) + num7) - 1;
                        if (num8 > count)
                        {
                            num8 = count;
                        }
                        mainform.tpagesitem tpagesitem = new mainform.tpagesitem {
                            startIndex = num3 + 1,
                            endIndex = num8,
                            subPages = null
                        };
                        tmpoutpupages.Add(tpagesitem);
                        num3 += num6;
                    }
                Label_022B:
                    num4 = calculatePagesCount(tmpoutpupages);
                    num3 = 0;
                    int num5 = 0;
                    foreach (mainform.tpagesitem tpagesitem2 in tmpoutpupages)
                    {
                        Document document2 = new Document();
                        DocumentInfo info = new DocumentInfo(document2);
                        if (g_splitsettings.keepOriginalInfo)
                        {
                            DocumentInfo info2 = new DocumentInfo(document);
                            info.Author = info2.Author;
                            info.Keywords = info2.Keywords;
                            info.Subject = info2.Subject;
                            info.Title = info2.Title;
                        }
                        else
                        {
                            if (g_splitsettings.pageInfoItems.Author != "")
                            {
                                info.Author = g_splitsettings.pageInfoItems.Author;
                            }
                            if (g_splitsettings.pageInfoItems.Author != "")
                            {
                                info.Keywords = g_splitsettings.pageInfoItems.Keywords;
                            }
                            if (g_splitsettings.pageInfoItems.Subject != "")
                            {
                                info.Subject = g_splitsettings.pageInfoItems.Subject;
                            }
                            if (g_splitsettings.pageInfoItems.Subject != "")
                            {
                                info.Title = g_splitsettings.pageInfoItems.Title;
                            }
                        }
                        info.CreationDate = DateTime.Now;
                        info.ModDate = DateTime.Now;
                        if (tpagesitem2.startIndex != -1)
                        {
                            for (int j = tpagesitem2.startIndex; j <= tpagesitem2.endIndex; j++)
                            {
                                if ((j <= count) && (j >= 1))
                                {
                                    addNewMergePage(document, document2, j);
                                    object[] objArray3 = new object[] { j };
                                    Logger.info("分割：第{0}页", objArray3);
                                    num3++;
                                }
                            }
                        }
                        else
                        {
                            foreach (mainform.tpagesitem tpagesitem3 in tpagesitem2.subPages)
                            {
                                for (int k = tpagesitem3.startIndex; k <= tpagesitem3.endIndex; k++)
                                {
                                    if ((k <= count) && (k >= 1))
                                    {
                                        addNewMergePage(document, document2, k);
                                        object[] objArray4 = new object[] { k };
                                        Logger.info("分割：第{0}页", objArray4);
                                        num3++;
                                    }
                                }
                            }
                        }
                        if (num3 <= 0)
                        {
                            goto Label_0609;
                        }
                        string outputDirPath = item.outputDirPath;
                        if (!item.outputDirPath.EndsWith(@"\"))
                        {
                            outputDirPath = outputDirPath + @"\";
                        }
                        outputDirPath = outputDirPath + Path.GetFileNameWithoutExtension(item.filename) + "_";
                        if (((g_splitsettings.split_page_mode == mainform.tsplitpagemode.spEvenPage) || (g_splitsettings.split_page_mode == mainform.tsplitpagemode.spOddPage)) || (g_splitsettings.split_page_mode == mainform.tsplitpagemode.spEveryPage))
                        {
                            outputDirPath = outputDirPath + num3 + ".pdf";
                        }
                        else
                        {
                            outputDirPath = outputDirPath + (num5 + 1) + ".pdf";
                        }
                        if (File.Exists(outputDirPath) && (appSettings.g_appSettings.overrideMode != appSettings.toverrideMode.omForceOverWrite))
                        {
                            int num11 = 1;
                            string path = outputDirPath;
                            do
                            {
                                string[] textArray1 = new string[] { Path.GetDirectoryName(outputDirPath), @"\", Path.GetFileNameWithoutExtension(outputDirPath), "_", num11.ToString(), ".pdf" };
                                path = string.Concat(textArray1);
                                num11++;
                            }
                            while (File.Exists(path));
                            if (appSettings.g_appSettings.overrideMode == appSettings.toverrideMode.omConfirm)
                            {
                                DialogResult result = MessageBox.Show($"同名文件已经存在，覆盖吗？
                                                                        文件名:"{Path.GetFileName(outputDirPath)}"
                                                                        选择"是": 覆盖同名文件
                                                                        选择"否": 自动命名
                                                                        选择"取消": 取消本次转换。", this.Text, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question);
                                if (result == DialogResult.No)
                                {
                                    outputDirPath = path;
                                    goto Label_05EA;
                                }
                                if (result != DialogResult.Cancel)
                                {
                                    goto Label_05EA;
                                }
                                g_threadAbortReq = true;
                                Logger.info("user cancel file overwite.");
                                break;
                            }
                            outputDirPath = path;
                        }
                    Label_05EA:
                        document2.Save(outputDirPath);
                        Logger.info("分割输出：" + Path.GetFileName(outputDirPath));
                    Label_0609:
                        Thread.Sleep(10);
                        item.percent = (num3 * 100) / num4;
                        object[] objArray5 = new object[] { tthreadnotifytype.tntStatusChanged, i };
                        base.BeginInvoke(new tworksThreadEventDelegate(this.splitThreadEvent), objArray5);
                        num5++;
                        if (g_threadAbortReq)
                        {
                            Logger.info("page,got user abort req.");
                            break;
                        }
                    }
                    item.result = taskResult.trSuccess;
                    Logger.info("分割文件：" + Path.GetFileName(item.filename) + "，完成。");
                }
                catch (Exception exception2)
                {
                    g_thread_error_text = exception2.ToString();
                    item.result = taskResult.trFailed;
                }
            }
            object[] objArray6 = new object[] { tthreadnotifytype.tntFinished, i };
            base.BeginInvoke(new tworksThreadEventDelegate(this.splitThreadEvent), objArray6);
            Thread.Sleep(1);
            if (g_threadAbortReq)
            {
                Logger.info("task,got user abort req.");
                break;
            }
        }
    }
    if (g_threadAbortReq)
    {
        object[] objArray7 = new object[] { tthreadnotifytype.tntUserAbort, 0 };
        base.BeginInvoke(new tworksThreadEventDelegate(this.splitThreadEvent), objArray7);
    }
    else
    {
        object[] objArray8 = new object[] { tthreadnotifytype.tntAllFinished, 0 };
        base.BeginInvoke(new tworksThreadEventDelegate(this.splitThreadEvent), objArray8);
    }
    Logger.info("splitThreadCallback end.");
}
