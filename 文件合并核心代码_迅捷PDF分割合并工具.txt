[StructLayout(LayoutKind.Sequential)]
public struct tmergeSettings
{
    public mainform.tmergePagemode page_mode;
    public ArrayList customizePages;
    public mainform.tpageInfoitems pageInfoItems;
}

public static tmergeSettings g_mergeSettings;

private void mergeThreadCallback()
{
    Logger.info("mergeThreadCallback start");
    new License().SetLicense(Application.StartupPath + @"\Aspose.Total.lic");
    string directoryName = Path.GetDirectoryName(appSettings.g_appSettings.mergeOutFileName);
    Logger.info("output path:" + appSettings.g_appSettings.mergeOutFileName);
    if (!Directory.Exists(directoryName))
    {
        Directory.CreateDirectory(directoryName);
    }
    Document document = new Document();
    DocumentInfo info = new DocumentInfo(document);
    if (g_mergeSettings.pageInfoItems.Author != "")
    {
        info.Author = g_mergeSettings.pageInfoItems.Author;
    }
    if (g_mergeSettings.pageInfoItems.Author != "")
    {
        info.Keywords = g_mergeSettings.pageInfoItems.Keywords;
    }
    if (g_mergeSettings.pageInfoItems.Subject != "")
    {
        info.Subject = g_mergeSettings.pageInfoItems.Subject;
    }
    if (g_mergeSettings.pageInfoItems.Subject != "")
    {
        info.Title = g_mergeSettings.pageInfoItems.Title;
    }
    info.CreationDate = DateTime.Now;
    info.ModDate = DateTime.Now;
    int num = 0;
    for (int i = 0; i < m_mergeTaskList.Count; i++)
    {
        threadTaskItem it = (threadTaskItem) m_mergeTaskList[i];
        if (!it.ignore)
        {
            object[] args = new object[] { tthreadnotifytype.tntStart, i };
            base.BeginInvoke(new tworksThreadEventDelegate(this.mergeThreadEvent), args);
            object[] objArray2 = new object[] { i, m_mergeTaskList.Count };
            Logger.info("合并文件{0}/{1}，加入 :" + Path.GetFileName(it.filename), objArray2);
            Document document2 = null;
            try
            {
                document2 = new Document(it.filename, it.filePassword);
            }
            catch
            {
                Logger.info($"读取文件失败！文件名:"{Path.GetFileName(it.filename)}"");
                it.error_text = "读取源文件失败";
                it.result = taskResult.trFailed;
                object[] objArray3 = new object[] { tthreadnotifytype.tntFinished, i };
                base.BeginInvoke(new tworksThreadEventDelegate(this.mergeThreadEvent), objArray3);
                Thread.Sleep(1);
                if (g_threadAbortReq)
                {
                    Logger.info("task,got user abort req.");
                    break;
                }
                continue;
            }
            int pageCount = 0;
            try
            {
                int count = document2.Pages.Count;
                if (g_mergeSettings.page_mode == tmergePagemode.mpEveryPage)
                {
                    foreach (Page page in document2.Pages)
                    {
                        pageCount++;
                        this.addOnePageMerge(appSettings.g_appSettings.mergeOutFileName, it.filename, document, i, it, pageCount, count, page);
                        if (g_threadAbortReq)
                        {
                            Logger.info("page,got user abort req.");
                            break;
                        }
                    }
                }
                else
                {
                    int num5 = 0;
                    foreach (mainform.tpagesitem tpagesitem in g_mergeSettings.customizePages)
                    {
                        if (tpagesitem.startIndex != -1)
                        {
                            for (int j = tpagesitem.startIndex; j <= tpagesitem.endIndex; j++)
                            {
                                if ((j <= count) && (j >= 1))
                                {
                                    pageCount++;
                                    this.addOnePageMerge(appSettings.g_appSettings.mergeOutFileName, it.filename, document, i, it, pageCount, count, document2.Pages[j]);
                                    if (g_threadAbortReq)
                                    {
                                        Logger.info("page,got user abort req.");
                                        break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            foreach (mainform.tpagesitem tpagesitem2 in tpagesitem.subPages)
                            {
                                for (int k = tpagesitem2.startIndex; k <= tpagesitem2.endIndex; k++)
                                {
                                    if ((k <= count) && (k >= 1))
                                    {
                                        pageCount++;
                                        this.addOnePageMerge(appSettings.g_appSettings.mergeOutFileName, it.filename, document, i, it, pageCount, count, document2.Pages[k]);
                                        if (g_threadAbortReq)
                                        {
                                            Logger.info("page,got user abort req.");
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        num5++;
                        if (g_threadAbortReq)
                        {
                            Logger.info("page,got user abort req.");
                            break;
                        }
                    }
                }
                it.result = taskResult.trSuccess;
            }
            catch (Exception exception1)
            {
                g_thread_error_text = exception1.ToString();
                it.result = taskResult.trFailed;
            }
            num += pageCount;
            object[] objArray4 = new object[] { tthreadnotifytype.tntFinished, i };
            base.BeginInvoke(new tworksThreadEventDelegate(this.mergeThreadEvent), objArray4);
            Thread.Sleep(1);
            if (g_threadAbortReq)
            {
                Logger.info("task,got user abort req.");
                break;
            }
        }
    }
    g_thread_error_text = "";
    try
    {
        if (num > 0)
        {
            string mergeOutFileName = appSettings.g_appSettings.mergeOutFileName;
            if (File.Exists(mergeOutFileName) && (appSettings.g_appSettings.overrideMode != appSettings.toverrideMode.omForceOverWrite))
            {
                int num8 = 1;
                string path = mergeOutFileName;
                do
                {
                    string[] textArray1 = new string[] { Path.GetDirectoryName(mergeOutFileName), @"\", Path.GetFileNameWithoutExtension(mergeOutFileName), "_", num8.ToString(), ".pdf" };
                    path = string.Concat(textArray1);
                    num8++;
                }
                while (File.Exists(path));
                if (appSettings.g_appSettings.overrideMode == appSettings.toverrideMode.omConfirm)
                {
                    switch (MessageBox.Show($"同名文件已经存在，覆盖吗？
                                              文件名:"{Path.GetFileName(mergeOutFileName)}"
                                              选择"是": 覆盖同名文件
                                              选择"否": 自动命名
                                              选择"取消": 取消本次转换。", this.Text, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question))
                    {
                        case DialogResult.No:
                            mergeOutFileName = path;
                            break;

                        case DialogResult.Cancel:
                            g_threadAbortReq = true;
                            Logger.info("user cancel file overwite.");
                            break;
                    }
                }
                else
                {
                    mergeOutFileName = path;
                }
            }
            if (!g_threadAbortReq)
            {
                document.Save(mergeOutFileName);
                object[] objArray5 = new object[] { mergeOutFileName };
                Logger.info("合并 \"{0}\" 成功", objArray5);
            }
        }
    }
    catch (Exception exception2)
    {
        g_thread_error_text = exception2.ToString();
        Logger.error("write file failed:" + appSettings.g_appSettings.mergeOutFileName);
    }
    if (g_threadAbortReq)
    {
        object[] objArray6 = new object[] { tthreadnotifytype.tntUserAbort, 0 };
        base.BeginInvoke(new tworksThreadEventDelegate(this.mergeThreadEvent), objArray6);
    }
    else
    {
        object[] objArray7 = new object[] { tthreadnotifytype.tntAllFinished, 0 };
        base.BeginInvoke(new tworksThreadEventDelegate(this.mergeThreadEvent), objArray7);
    }
    Logger.info("mergeThreadCallback end.");
}


private void mergeThreadCallback()
{
    Logger.info("mergeThreadCallback start");
    new License().SetLicense(Application.StartupPath + @"\Aspose.Total.lic");
    string directoryName = Path.GetDirectoryName(appSettings.g_appSettings.mergeOutFileName);
    Logger.info("output path:" + appSettings.g_appSettings.mergeOutFileName);
    if (!Directory.Exists(directoryName))
    {
        Directory.CreateDirectory(directoryName);
    }
    Document document = new Document();
    DocumentInfo info = new DocumentInfo(document);
    if (g_mergeSettings.pageInfoItems.Author != "")
    {
        info.Author = g_mergeSettings.pageInfoItems.Author;
    }
    if (g_mergeSettings.pageInfoItems.Author != "")
    {
        info.Keywords = g_mergeSettings.pageInfoItems.Keywords;
    }
    if (g_mergeSettings.pageInfoItems.Subject != "")
    {
        info.Subject = g_mergeSettings.pageInfoItems.Subject;
    }
    if (g_mergeSettings.pageInfoItems.Subject != "")
    {
        info.Title = g_mergeSettings.pageInfoItems.Title;
    }
    info.CreationDate = DateTime.Now;
    info.ModDate = DateTime.Now;
    int num = 0;
    for (int i = 0; i < m_mergeTaskList.Count; i++)
    {
        threadTaskItem it = (threadTaskItem) m_mergeTaskList[i];
        if (!it.ignore)
        {
            object[] args = new object[] { tthreadnotifytype.tntStart, i };
            base.BeginInvoke(new tworksThreadEventDelegate(this.mergeThreadEvent), args);
            object[] objArray2 = new object[] { i, m_mergeTaskList.Count };
            Logger.info("合并文件{0}/{1}，加入 :" + Path.GetFileName(it.filename), objArray2);
            Document document2 = null;
            try
            {
                document2 = new Document(it.filename, it.filePassword);
            }
            catch
            {
                Logger.info($"读取文件失败！文件名:"{Path.GetFileName(it.filename)}"");
                it.error_text = "读取源文件失败";
                it.result = taskResult.trFailed;
                object[] objArray3 = new object[] { tthreadnotifytype.tntFinished, i };
                base.BeginInvoke(new tworksThreadEventDelegate(this.mergeThreadEvent), objArray3);
                Thread.Sleep(1);
                if (g_threadAbortReq)
                {
                    Logger.info("task,got user abort req.");
                    break;
                }
                continue;
            }
            int pageCount = 0;
            try
            {
                int count = document2.Pages.Count;
                if (g_mergeSettings.page_mode == tmergePagemode.mpEveryPage)
                {
                    foreach (Page page in document2.Pages)
                    {
                        pageCount++;
                        this.addOnePageMerge(appSettings.g_appSettings.mergeOutFileName, it.filename, document, i, it, pageCount, count, page);
                        if (g_threadAbortReq)
                        {
                            Logger.info("page,got user abort req.");
                            break;
                        }
                    }
                }
                else
                {
                    int num5 = 0;
                    foreach (mainform.tpagesitem tpagesitem in g_mergeSettings.customizePages)
                    {
                        if (tpagesitem.startIndex != -1)
                        {
                            for (int j = tpagesitem.startIndex; j <= tpagesitem.endIndex; j++)
                            {
                                if ((j <= count) && (j >= 1))
                                {
                                    pageCount++;
                                    this.addOnePageMerge(appSettings.g_appSettings.mergeOutFileName, it.filename, document, i, it, pageCount, count, document2.Pages[j]);
                                    if (g_threadAbortReq)
                                    {
                                        Logger.info("page,got user abort req.");
                                        break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            foreach (mainform.tpagesitem tpagesitem2 in tpagesitem.subPages)
                            {
                                for (int k = tpagesitem2.startIndex; k <= tpagesitem2.endIndex; k++)
                                {
                                    if ((k <= count) && (k >= 1))
                                    {
                                        pageCount++;
                                        this.addOnePageMerge(appSettings.g_appSettings.mergeOutFileName, it.filename, document, i, it, pageCount, count, document2.Pages[k]);
                                        if (g_threadAbortReq)
                                        {
                                            Logger.info("page,got user abort req.");
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        num5++;
                        if (g_threadAbortReq)
                        {
                            Logger.info("page,got user abort req.");
                            break;
                        }
                    }
                }
                it.result = taskResult.trSuccess;
            }
            catch (Exception exception1)
            {
                g_thread_error_text = exception1.ToString();
                it.result = taskResult.trFailed;
            }
            num += pageCount;
            object[] objArray4 = new object[] { tthreadnotifytype.tntFinished, i };
            base.BeginInvoke(new tworksThreadEventDelegate(this.mergeThreadEvent), objArray4);
            Thread.Sleep(1);
            if (g_threadAbortReq)
            {
                Logger.info("task,got user abort req.");
                break;
            }
        }
    }
    g_thread_error_text = "";
    try
    {
        if (num > 0)
        {
            string mergeOutFileName = appSettings.g_appSettings.mergeOutFileName;
            if (File.Exists(mergeOutFileName) && (appSettings.g_appSettings.overrideMode != appSettings.toverrideMode.omForceOverWrite))
            {
                int num8 = 1;
                string path = mergeOutFileName;
                do
                {
                    string[] textArray1 = new string[] { Path.GetDirectoryName(mergeOutFileName), @"\", Path.GetFileNameWithoutExtension(mergeOutFileName), "_", num8.ToString(), ".pdf" };
                    path = string.Concat(textArray1);
                    num8++;
                }
                while (File.Exists(path));
                if (appSettings.g_appSettings.overrideMode == appSettings.toverrideMode.omConfirm)
                {
                    switch (MessageBox.Show($"同名文件已经存在，覆盖吗？
                                              文件名:"{Path.GetFileName(mergeOutFileName)}"
                                              选择"是": 覆盖同名文件
                                              选择"否": 自动命名
                                              选择"取消": 取消本次转换。", this.Text, MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question))
                    {
                        case DialogResult.No:
                            mergeOutFileName = path;
                            break;

                        case DialogResult.Cancel:
                            g_threadAbortReq = true;
                            Logger.info("user cancel file overwite.");
                            break;
                    }
                }
                else
                {
                    mergeOutFileName = path;
                }
            }
            if (!g_threadAbortReq)
            {
                document.Save(mergeOutFileName);
                object[] objArray5 = new object[] { mergeOutFileName };
                Logger.info("合并 \"{0}\" 成功", objArray5);
            }
        }
    }
    catch (Exception exception2)
    {
        g_thread_error_text = exception2.ToString();
        Logger.error("write file failed:" + appSettings.g_appSettings.mergeOutFileName);
    }
    if (g_threadAbortReq)
    {
        object[] objArray6 = new object[] { tthreadnotifytype.tntUserAbort, 0 };
        base.BeginInvoke(new tworksThreadEventDelegate(this.mergeThreadEvent), objArray6);
    }
    else
    {
        object[] objArray7 = new object[] { tthreadnotifytype.tntAllFinished, 0 };
        base.BeginInvoke(new tworksThreadEventDelegate(this.mergeThreadEvent), objArray7);
    }
    Logger.info("mergeThreadCallback end.");
}
